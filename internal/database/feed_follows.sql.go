// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFeedtoUser = `-- name: AddFeedtoUser :one
WITH inserted_feed_follow AS (
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    ) RETURNING id, created_at, updated_at, user_id, feed_id
) SELECT
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM inserted_feed_follow
INNER JOIN users ON users.id = inserted_feed_follow.user_id
INNER JOIN feeds ON feeds.id = inserted_feed_follow.feed_id
`

type AddFeedtoUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type AddFeedtoUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) AddFeedtoUser(ctx context.Context, arg AddFeedtoUserParams) (AddFeedtoUserRow, error) {
	row := q.db.QueryRowContext(ctx, addFeedtoUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i AddFeedtoUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedFollowesFor = `-- name: GetFeedFollowesFor :many
SELECT
    users.name AS userName,
    feeds.name AS feedName,
    feeds.url AS url
FROM feed_follows
INNER JOIN users ON users.id = feed_follows.user_id
INNER JOIN feeds ON feeds.id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
`

type GetFeedFollowesForRow struct {
	Username string
	Feedname string
	Url      string
}

func (q *Queries) GetFeedFollowesFor(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowesForRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowesFor, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowesForRow
	for rows.Next() {
		var i GetFeedFollowesForRow
		if err := rows.Scan(&i.Username, &i.Feedname, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unFollow = `-- name: UnFollow :one
DELETE FROM feed_follows
WHERE feed_id = (SELECT id FROM feeds WHERE url = $2)
AND feed_follows.user_id = $1
RETURNING id, created_at, updated_at, user_id, feed_id
`

type UnFollowParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) UnFollow(ctx context.Context, arg UnFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, unFollow, arg.UserID, arg.Url)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}
